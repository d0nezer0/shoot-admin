# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'system.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets, Qt
from PyQt5.QtWidgets import *
from train_setting_manager import ts_manager
from models.targeting_system_settings import TrainSettingRecord, UnifiedTrainStatus, Mode
from models.single_round import SingleRound
from my_rank_widget import LeaderboardWidget


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        desktop = QtWidgets.QApplication.desktop()
        self.height = desktop.height()
        self.width = desktop.width()
        # MainWindow.resize(width, height)

        # self.centralwidget = QtWidgets.QWidget()
        self.centralwidget = QtWidgets.QFrame()
        self.centralwidget.setObjectName("centralwidget")
        self.centralwidget.setGeometry(QtCore.QRect(0, 0, int(self.width), int(self.height)))  # 大小需要与实际内容大小匹配
        # self.centralwidget.setGeometry(QtCore.QRect(0, 0, 2414, 1040))
        self.scroll_area = QtWidgets.QScrollArea(MainWindow)
        # self.scroll_area.setWidget(self.centralwidget)
        self.scroll_area.setGeometry(10, 10, int(self.width*2/3), self.height)
        self.scroll_area.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOn)
        self.scroll_area.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOn)

        vbar = self.scroll_area.verticalScrollBar()
        vbar.setMaximum(self.height)
        vbar.setSingleStep(10)


        self.min_max_control_pannel = QtWidgets.QFrame(MainWindow)
        self.min_max_control_pannel.setGeometry(int(self.width * 2 / 3)-15, 10,  35, self.height)
        self.min_max_control_pannel_hbox = QVBoxLayout(self.min_max_control_pannel)

        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(50)
        self.min_max_btn = QtWidgets.QPushButton()
        self.min_max_btn.setFont(font)
        self.min_max_btn.setObjectName("min_max_btn")
        self.min_max_btn.setStyleSheet("color: rgb(0, 60, 23);")
        self.min_max_btn.setText(">")
        self.min_max_control_pannel_hbox.addWidget(self.min_max_btn, stretch=1)
        self.min_max_btn.clicked.connect(self.min_max_control_clicked)


        self.device_control_pannel = QtWidgets.QFrame()
        self.device_control_pannel.setStyleSheet("background-color: rgb(173, 181, 185);")
        # self.device_control_pannel.setGeometry(10, 10, int(self.width / 3) - 10, int(self.height/3))

        self.top_rank_pannel = QtWidgets.QFrame()
        self.top_rank_pannel.setStyleSheet("background-color: rgb(173, 181, 185);")
        # self.top_rank_pannel.setGeometry(10, 10, int(self.width / 3) - 10, self.height)

        self.tabwidget = QTabWidget(MainWindow)
        self.tabwidget.setGeometry(int(self.width * 2 / 3) + 10, 10, int(self.width / 3) - 20, self.height)
        self.tabwidget.resize(int(self.width / 3), self.height)
        self.tabwidget.addTab(self.device_control_pannel, "射击设置")
        self.tabwidget.addTab(self.top_rank_pannel, "排 行 榜")
        self.tabwidget.currentChanged.connect(self.tabchange)

        self.init_control_tab()
        self.init_rank_pannel()

        # self.tabwidget.hide()

        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


    def resize_scorll(self, width, height):
        self.centralwidget.setGeometry(QtCore.QRect(0, 0, 1400, 1500))

    def min_max_control_clicked(self):
        if self.tabwidget.isHidden():
            self.tabwidget.show()
            self.scroll_area.setGeometry(10, 10, int(self.width * 2 / 3), self.height)
            self.min_max_control_pannel.setGeometry(int(self.width * 2 / 3)-15, 10,  35, self.height)
            self.min_max_btn.setText(">")
        else:
            self.tabwidget.hide()
            self.scroll_area.resize(self.width - 10, self.height)
            self.min_max_control_pannel.setGeometry(int(self.width-10)-15, 10, 35, self.height)
            self.min_max_btn.setText("<")

    def init_control_tab(self):
        self.create_mode_control(self.device_control_pannel)
        self.import_cfg_widgets(self.device_control_pannel)
        self.init_round_list()

    def create_mode_control(self, parent):
        frame_8 = QtWidgets.QFrame(parent)
        # frame_8 = QtWidgets.QFrame()
        width = int(self.width / 3)
        frame_8.setGeometry(QtCore.QRect(20, 10, width - 40, 50))
        # self.frame_8.setStyleSheet("background-color: rgb(173, 181, 185);")
        frame_8.setStyleSheet("background-color: rgb(0, 60, 23);")
        # self.frame_8.setFrameShape(QtWidgets.QFrame.StyledPanel)
        # self.frame_8.setFrameShadow(QtWidgets.QFrame.Raised)
        frame_8.setObjectName("frame__control")
        # self.device_control_pannel_hbox.addWidget(frame_8)

        self.mode_group = QtWidgets.QButtonGroup(frame_8)
        self.ziyou_mode = QtWidgets.QRadioButton(frame_8)

        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(50)
        self.ziyou_mode.setFont(font)
        self.ziyou_mode.setStyleSheet("color: rgb(255, 255, 255);")
        # self.ziyou_mode.setChecked(True)
        self.ziyou_mode.setGeometry(QtCore.QRect(10, 15, int(width/2), 16))

        self.tongyi_mode = QtWidgets.QRadioButton(frame_8)
        self.tongyi_mode.setFont(font)
        self.tongyi_mode.setStyleSheet("color: rgb(255, 255, 255);")
        self.tongyi_mode.setGeometry(QtCore.QRect(int(width/2), 15, width, 16))

        self.mode_group.addButton(self.ziyou_mode, 1)
        self.mode_group.addButton(self.tongyi_mode, 2)
        self.mode_group.buttonToggled.connect(self.mode_selected)
        if ts_manager.mode == Mode.FreeTraining.value:
            self.ziyou_mode.setChecked(True)
        if ts_manager.mode == Mode.UnifiedTraining.value:
            self.tongyi_mode.setChecked(True)

    def mode_selected(self, value):
        if ts_manager.mode == Mode.UnifiedTraining.value and ts_manager.status == UnifiedTrainStatus.Started.value:
            if value == self.ziyou_mode:
                self.tongyi_mode.setChecked(True)
        else:
            if value == self.ziyou_mode:
                ts_manager.update_mode(Mode.FreeTraining)
            else:
                ts_manager.update_mode(Mode.UnifiedTraining)

    def init_round_list(self):
        frame_8 = QtWidgets.QFrame(self.device_control_pannel)
        width = int(self.width / 3)
        frame_8.setGeometry(QtCore.QRect(20, 240, width - 40, 400))
        frame_8.setObjectName("round_list")
        self.round_rank_widget = LeaderboardWidget(frame_8)

    def update_round_rank(self, rank_list):
        self.round_rank_widget.update_rank(rank_list)

    def init_rank_pannel(self):
        self.list = QListWidget()
        self.list.setMaximumWidth(100)

        # 设置列表内容（stack的索引）
        self.list.insertItem(0, '日 榜')
        self.list.insertItem(1, '周 榜')
        self.list.insertItem(2, '月 榜')
        self.list.insertItem(3, '年 榜')

        # 创建三个stack页面

        self.day_leader_board = LeaderboardWidget(None)
        self.day_leader_board.title_label.setText("今日最佳排行榜：")
        self.week_leader_board = LeaderboardWidget(None)
        self.week_leader_board.title_label.setText("本周最佳排行榜：")
        self.month_leader_board = LeaderboardWidget(None)
        self.month_leader_board.title_label.setText("月度最佳排行榜：")
        self.year_leader_board = LeaderboardWidget(None)
        self.year_leader_board.title_label.setText("年度最佳排行榜：")


        # 将三个stack页面加入stackWidget
        self.stackWidget = QStackedWidget()
        self.stackWidget.addWidget(self.day_leader_board)
        self.stackWidget.addWidget(self.week_leader_board)
        self.stackWidget.addWidget(self.month_leader_board)
        self.stackWidget.addWidget(self.year_leader_board)

        hbox = QHBoxLayout()
        hbox.addWidget(self.stackWidget)
        hbox.addWidget(self.list)
        self.list.itemClicked.connect(self.top_rank_list_item_clicked)

        self.top_rank_pannel.setLayout(hbox)

    def tabchange(self):
        if self.tabwidget.currentIndex() == 1:  # 切换到排行榜
            if self.list.currentRow() == -1:
                self.list.setCurrentRow(0)
            self.show_rank(self.list.currentRow())

    def show_rank(self, row_index):
        self.stackWidget.setCurrentIndex(row_index)
        if row_index == 0:
            self.day_leader_board.update_rank(SingleRound.get_currentDay_top10(is_dict=False))
        elif row_index == 1:
            self.week_leader_board.update_rank(SingleRound.get_crrentWeek_top10(is_dict=False))
        elif row_index == 2:
            self.month_leader_board.update_rank(SingleRound.get_currentMonth_top10(is_dict=False))
        elif row_index == 3:
            self.year_leader_board.update_rank(SingleRound.get_currentYEAR_top10(is_dict=False))


    def top_rank_list_item_clicked(self):
        # print(f"self.list.currentIndex():::::{self.list.currentIndex()}")
        self.show_rank(self.list.currentRow())

    def import_cfg_widgets(self, parent):
        frame_8 = QtWidgets.QFrame(parent)
        # frame_8 = QtWidgets.QFrame()

        width = int(self.width/3)
        frame_8.setGeometry(QtCore.QRect(20, 60, width-40, 161))

        frame_8.setObjectName("import_cfg")
        # self.device_control_pannel_hbox.addWidget(frame_8)

        self.btnwidget = QWidget(frame_8)
        self.btnwidget.setGeometry(QtCore.QRect(0, 10, width-60, 80))  # 按钮控件布局及大小

        self.hlayout_btn = QHBoxLayout(self.btnwidget)  # 加水平布局
        self.hlayout_btn.setSpacing(10)  # 水平布局中控件的间隔

        self.lineEdit = QtWidgets.QLineEdit()
        # self.lineEdit.setGeometry(QtCore.QRect(5, 30, 141, 41))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(20)
        self.lineEdit.setFont(font)
        self.lineEdit.setStyleSheet("background-color: rgb(240, 240, 240);")
        self.lineEdit.setObjectName("lineEdit")

        self.hlayout_btn.addWidget(self.lineEdit)

        self.import_btn = QtWidgets.QPushButton()

        self.import_btn.setFont(font)
        button_style_sheet_str = "background-color: rgb(231, 245, 251);\n color: rgb(0, 60, 23);"
        self.import_btn.setStyleSheet(button_style_sheet_str)
        self.import_btn.setObjectName("import_btn")

        self.hlayout_btn.addWidget(self.import_btn)

        self.check_list_btn = QtWidgets.QPushButton()

        self.check_list_btn.setFont(font)
        self.check_list_btn.setStyleSheet(button_style_sheet_str)
        self.check_list_btn.setObjectName("check_list_btn")

        # self.hlayout_btn.addWidget(self.check_list_btn)

        self.btnwidget2 = QWidget(frame_8)
        self.btnwidget2.setGeometry(QtCore.QRect(0, 90, width, 80))  # 按钮控件布局及大小
        self.hlayout_btn2 = QHBoxLayout(self.btnwidget2)  # 加水平布局
        self.hlayout_btn2.setSpacing(30)  # 水平布局中控件的间隔

        self.start_btn = QtWidgets.QPushButton()
        self.start_btn.setGeometry(QtCore.QRect(90, 90, 91, 41))

        self.start_btn.setFont(font)
        self.start_btn.setStyleSheet(button_style_sheet_str)
        self.start_btn.setObjectName("start_btn")
        self.hlayout_btn2.addWidget(self.start_btn)

        self.last_round_btn = QtWidgets.QPushButton()
        self.last_round_btn.setGeometry(QtCore.QRect(250, 90, 91, 41))

        self.last_round_btn.setFont(font)
        self.last_round_btn.setStyleSheet(button_style_sheet_str)
        self.last_round_btn.setObjectName("last_round_btn")
        self.next_round_btn = QtWidgets.QPushButton()
        self.next_round_btn.setGeometry(QtCore.QRect(410, 90, 91, 41))

        self.next_round_btn.setFont(font)
        self.next_round_btn.setStyleSheet(button_style_sheet_str)
        self.next_round_btn.setObjectName("next_round_btn")
        self.finish_btn = QtWidgets.QPushButton()
        self.finish_btn.setGeometry(QtCore.QRect(300, 90, 91, 41))

        self.finish_btn.setFont(font)
        self.finish_btn.setStyleSheet(button_style_sheet_str)
        self.finish_btn.setObjectName("finish_btn")

        self.hlayout_btn2.addWidget(self.finish_btn)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "射击训练分析系统"))
        # self.pushButton.setText(_translate("MainWindow", "设备控制"))
        # self.pushButton_2.setText(_translate("MainWindow", "实时监控"))
        # self.label.setText(_translate("MainWindow", "总控端"))
        # self.label_3.setText(_translate("MainWindow", "设备列表"))
        # self.label_4.setText(_translate("MainWindow", "模式"))
        # self.label_5.setText(_translate("MainWindow", "统一控制"))
        # self.label_6.setText(_translate("MainWindow", "设置"))
        # self.pushButton_3.setText(_translate("MainWindow", "自由训练"))
        # self.pushButton_5.setText(_translate("MainWindow", "统一训练"))
        # self.label_7.setText(_translate("MainWindow", "名单导入"))
        self.lineEdit.setPlaceholderText(_translate("MainWindow", "文件路径"))
        self.start_btn.setText(_translate("MainWindow", "开始训练"))
        self.last_round_btn.setText(_translate("MainWindow", "上一组"))
        self.next_round_btn.setText(_translate("MainWindow", "下一组"))
        self.finish_btn.setText(_translate("MainWindow", "结束训练"))
        self.import_btn.setText(_translate("MainWindow", "选择文件"))
        self.check_list_btn.setText(_translate("MainWindow", "查看名单"))
        # self.label_14.setText(_translate("MainWindow", "打印机IP:"))
        # self.lineEdit_2.setText(_translate("MainWindow", "192.168.8.90"))
        # self.lineEdit_2.setPlaceholderText(_translate("MainWindow", "文件路径"))
        # self.label_15.setText(_translate("MainWindow", "是否自动打印"))
        # self.pushButton_11.setText(_translate("MainWindow", "设置"))
        # self.label_2.setText(_translate("MainWindow", "设备控制"))
        self.tongyi_mode.setText(_translate("MainWindow", "统一训练"))
        self.ziyou_mode.setText(_translate("MainWindow", "自由训练"))

import image_rc
